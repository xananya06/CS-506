# -*- coding: utf-8 -*-
"""operatingBudget-policeDepartment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bz7fnARCNH_KT6KZRQCZ68_glO199oP5

# Import statements
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

"""# Load in the data"""

df=pd.read_csv("/content/8f2971f0-7a0d-401d-8376-0289e3b810ba.csv")

"""# Check stats"""

df.head()

df.info()

df.describe()

df.columns

"""# Mark missing values as Empty and convert columns to numerical"""

for item in ['FY22 Actual Expense', 'FY23 Actual Expense', 'FY24 Appropriation',
       'FY25 Budget']:
       df[item]=df[item].replace("#Missing",None)



for item in ['FY22 Actual Expense', 'FY23 Actual Expense', 'FY24 Appropriation',
       'FY25 Budget']:
       df[item]=df[item].astype("float")

"""# Revisit the stats"""

##We can now truly see the number of empty values in the dataframe.

df.info()

df.describe()

df.head()

"""# Filtering on Police Department and handling Empty values"""

#Fetch all numerical columns

numerical=[]
categorical=[]
for item in df.columns:
  if df[item].dtype!="object":
    numerical.append(item)
  else:
    categorical.append(item)

df=df[df["Dept"]=="Police Department"]

df.dropna(inplace=True)

"""# Identifying Outliers in the data"""

df.columns

#Lets use the IQR strategy to detect the outliers
outlierAnalysis=[]
for item in df.columns:
  if df[item].dtype!="object" and item!="_id":
    percentile_1=np.percentile(df[item],25)
    percentile_2=np.percentile(df[item],75)
    print(percentile_2,percentile_1)
    iqr=percentile_2-percentile_1
    outlier_min=percentile_1-(1.5*iqr)
    outlier_max=percentile_2+(1.5*iqr)
    print(outlier_max,outlier_min)
    df[(df[item]>outlier_max) | (df[item]<outlier_min)]
    outlierAnalysis.append([item,df[(df[item]>outlier_max) | (df[item]<outlier_min)].shape[0]])

pd.DataFrame(outlierAnalysis,columns=["Name","Count"]).plot(kind="barh",x="Name",y="Count")
plt.title("Possible outlier count for each column")
plt.tight_layout()
plt.savefig("Outlier_Analysis.png", dpi=300, bbox_inches='tight')

"""# Starting of visual analysis

# Some Insights based on analysis

1. The Bureau of Intelligence & Analysis saw the most decrease in budget for 2025 in comparison to its budget for the annual year 2022.
2. The Bureau of Professional Development	saw the most increase in budget for 2025 in comparison to its budget for the annual year 2022.
3. The 2025 budget allocation saw an increase from all of the previous Financial years.
4. BAT Programmes requirement for equipments have greatly increased.
5. Current Charges & Obligations under the Bureau of Field Services saw a staggering 5000% increase in the FY 2025 Budget in comparison to the 2022 Budget.
6. Equipments and Contractual Services saw a significant increase in budget allocation.
7. Supplies & Materials	under the Police Commissioner's Office had the greatest decrease in Budget for 2025 in comparison to 2022.
8. The Bureau of Intelligence & Analysis budget kept decreasing from 2022 to 2024 and then from 2024 to 2025 it saw a mild increase in budget.
9. The last cell block visualizes the programme which has allocated the minimum/maximum funds on each of the expense category for 2025.
10. The overall trends are increasing while some show fluctuations/decrease in growth sporadically.
"""

for item in df.columns:
  if df[item].dtype!="object" and item!="_id":
    plt.title(f"Distribution of {item} Data for the Boston Police Department")
    sns.histplot(df[item], bins=30, kde=True, color="red", edgecolor="black", alpha=0.8)
    plt.tight_layout()
    plt.savefig(f"Distribution of {item} data.png", dpi=300, bbox_inches='tight')
    plt.show()
    print("\n\n\n")

df_average=df[["Program","FY22 Actual Expense","FY23 Actual Expense","FY24 Appropriation","FY25 Budget"]].groupby("Program").mean()
for item in df_average.columns:
  if df_average[item].dtype!="object" and item!="_id":
    plt.title(f"Average expense department wise for the {item}")
    sns.barplot(x=df_average[item],y=df_average.index,orient="h")
    plt.tight_layout()
    plt.savefig(f"Average_Expense_{item}.png", dpi=300, bbox_inches='tight')
    plt.show()
    print("\n\n\n")

df.columns

dfTemp=df[numerical+["Program"]].groupby("Program").mean().drop("_id",axis=1)

dfTemp.shape

indices=dfTemp.index
fig,ax=plt.subplots(2,2,figsize=(20, 10))
row,column=0,0
for item in dfTemp.columns:
  values=dfTemp[item].tolist()
  ax[row][column].pie(values,labels=indices,autopct='%.1f%%')
  ax[row][column].set_title(item)
  ax[row][column].legend(bbox_to_anchor=(-0.05, 0.65))
  column+=1
  if column==2:
    row+=1
    column=0

plt.tight_layout()
plt.savefig(f"Program wise spending distribution.png", dpi=300, bbox_inches='tight')

# Lets start with analyzing which particular programme within the police department had the greatest increase in spending

dfTemp.head()

differences=[]

for item in indices:
  increase=(dfTemp.loc[item,"FY25 Budget"]-dfTemp.loc[item,"FY24 Appropriation"])/dfTemp.loc[item,"FY24 Appropriation"]
  differences.append([item,increase])


df_2024_2025=pd.DataFrame(differences,columns=["Program","Percentage Inc/Dec in budget (2024-2025)"]).sort_values(by="Percentage Inc/Dec in budget (2024-2025)")

# Lets start with analyzing which particular programme within the police department had the greatest increase in spending

dfTemp.head()

differences=[]

for item in indices:
  increase=(dfTemp.loc[item,"FY25 Budget"]-dfTemp.loc[item,"FY22 Actual Expense"])/dfTemp.loc[item,"FY22 Actual Expense"]
  differences.append([item,increase])


df_2022_2025=pd.DataFrame(differences,columns=["Program","Percentage Inc/Dec in budget (2022-2025)"]).sort_values(by="Percentage Inc/Dec in budget (2022-2025)")

sns.barplot(y=df_2022_2025["Program"],x=df_2022_2025["Percentage Inc/Dec in budget (2022-2025)"])
plt.tight_layout()
plt.savefig("Percentage Increase\Decrease 2022-2025 (Programme Wise).png",dpi=300, bbox_inches='tight')

sns.barplot(y=df_2024_2025["Program"],x=df_2024_2025["Percentage Inc/Dec in budget (2024-2025)"])
plt.savefig("Percentage Increase\Decrease 2024-2025 (Programme Wise).png",dpi=300,bbox_inches='tight')

# For each of the Programmes within the Police Department, Which expense category is most expenseive


for item in indices:
  currentProgram=df[df["Program"]==item]
  print(item,"\n\n\n",currentProgram[["Expense Category","FY22 Actual Expense"]].groupby("Expense Category").mean()["FY22 Actual Expense"].sort_values())
  print("\n\n")

for item in indices:
  currentProgram=df[df["Program"]==item]
  print(item,"\n\n\n",currentProgram[["Expense Category","FY25 Budget"]].groupby("Expense Category").mean()["FY25 Budget"].sort_values())
  print("\n\n")

# Lets merge both of them together and see the increase/decrease for each category


stats=[]


for item in indices:
  currentProgram=df[df["Program"]==item]
  df_1=currentProgram[["Expense Category","FY25 Budget"]].groupby("Expense Category").mean()["FY25 Budget"].sort_values()
  df_2=currentProgram[["Expense Category","FY22 Actual Expense"]].groupby("Expense Category").mean()["FY22 Actual Expense"].sort_values()
  df_1=pd.DataFrame(df_1)
  df_2=pd.DataFrame(df_2)
  df_1["Categories"]=df_1.index
  df_2["Categories"]=df_2.index


  df_3=df_1.merge(df_2,on="Categories")

  df_3["Diff"]=(df_3["FY25 Budget"]-df_3["FY22 Actual Expense"])/df_3["FY22 Actual Expense"]
  df_3["Diff"]=df_3["Diff"]*100
  df_3=df_3[["Diff","Categories"]]
  df_3["Name"]=[item]*df_3.shape[0]
  stats.append(df_3)




dfStats=pd.concat([*stats],axis=0)
dfStats.sort_values(by="Diff")


plt.figure(figsize=(8,8))
sns.barplot(data=dfStats, y="Name", x="Diff", hue="Categories", palette="rocket")
plt.xlim(-100,2000)
plt.legend(loc="lower right")
plt.savefig("Expense Category Percentage Difference 2022-2025 (Programme Wise)",dpi=300,bbox_inches='tight')

dfStats.sort_values(by="Diff")

# For each expense category, which programme has been allocated the least funds for 2025

values=[[],[]]
for item in df["Expense Category"].unique().tolist():
  values[0].append(df[df["Expense Category"]==item][["Program","FY25 Budget"]].sort_values(by="FY25 Budget").iloc[0,0])

# For each expense category, which programme has been allocated the least funds for 2025

for item in df["Expense Category"].unique().tolist():
  values[1].append(df[df["Expense Category"]==item][["Program","FY25 Budget"]].sort_values(by="FY25 Budget").iloc[-1,0])

columns=df["Expense Category"].unique().tolist()
dfDiff=pd.DataFrame(values,columns=columns)
dfDiff.index=["Dept that spent minimum","Dept that spent maximum"]

dfDiff.head()

